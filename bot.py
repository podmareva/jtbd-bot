import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:
    ‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;
    ‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;
    ‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;
    ‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[\u041f\u043e\u043b\u0438\u0442\u0438\u043a\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0434\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438](https://docs.google.com/document/d/1UUyKq7aCbtrOT81VBVwgsOipjtWpro7v/edit?usp=drive_link&ouid=104429050326439982568&rtpof=true&sd=true) –∏ "
    "[\u0414\u043e\u0433\u043e\u0432\u043e\u0440\u043e\u043c‚Äë\u043e\u0444\u0435\u0440\u0442\u043e\u0439](https://533baa06-ee8c-4f9f-a849-1e8a7826bc45-00-2qjxcpo7ji57w.janeway.replit.dev/).\n\n"
    "‚úÖ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å."
)

INTERVIEW_Q = [
    "1. –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –∏ –ø–æ—á–µ–º—É —Ç—ã –≤—ã–±—Ä–∞–ª(–∞) —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?",
    "2. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "3. –ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?",
    "4. –ö–∞–∫–∏–µ —É —Ç–µ–±—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞?",
    "5. –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –¥–∞—ë—Ç —Å–∏–ª—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å?",
    "6. –ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç—ã –Ω–µ –º–µ–Ω—è–µ—à—å –Ω–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö?",
    "7. –ö–∞–∫–∏–º —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å –≤ –≥–ª–∞–∑–∞—Ö —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏?",
    "8. –ö–∞–∫–∏–º –æ–ø—ã—Ç–æ–º —Ç—ã —Ö–æ—á–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ?",
    "9. –ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—á–µ—à—å –ø—Ä–∏–≤–Ω–µ—Å—Ç–∏ –≤ –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤?",
    "10. –ß–µ–º —Ç—ã –æ—Ç–ª–∏—á–∞–µ—à—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤?",
    "11. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏—Å—Å–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—à—å?",
    "12. –ö–∞–∫–∏–µ —Ç–µ–º—ã —Å—á–∏—Ç–∞–µ—à—å –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è –±–ª–æ–≥–∞?",
    "13. –° –∫–∞–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ç–µ–±–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å?",
    "14. –ï—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏ —Ç–µ–±—è?",
    "15. –ö–∞–∫–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è?"
]

MAIN_MENU = [("üì± BIO", "bio"), ("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞", "product"), ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")]
FINAL_MENU = [("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "get_access"), ("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", "have"), ("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", "later")]

async def get_feedback(text):
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª:\n\"{text}\"\n\n"
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç: –µ—Å–ª–∏ –æ–Ω –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π, —Å–ø–æ—Ä–Ω—ã–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º —á–µ—Å—Ç–Ω–æ."
        "–ï—Å–ª–∏ –¥–æ—Å—Ç–æ–π–Ω—ã–π ‚Äî –æ—Ü–µ–Ω–∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ, –∫–∞–∫ –∫–æ—É—á –∏–ª–∏ –º–µ–Ω—Ç–æ—Ä. –ë–µ–∑ –ª–µ—Å—Ç–∏ –∏ —à–∞–±–ª–æ–Ω–æ–≤."
    )
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=300,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except:
        return "–ü—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ."

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage": "welcome", "answers": [], "product_answers": []}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê", callback_data="agree")]]
    await ctx.bot.send_message(chat_id=cid, text=WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    query = update.callback_query
    data = query.data
    sess = sessions.get(cid)
    await query.answer()
    if not sess:
        return

    if sess["stage"] == "welcome" and data == "agree":
        sess["stage"] = "interview"
        await ctx.bot.send_message(chat_id=cid, text=(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
            "–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ –æ—á–µ—Ä–µ–¥–∏, –∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é.\n\n"
            "–ì–æ—Ç–æ–≤(–∞)? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º üëá"
        ))
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0])

    elif sess["stage"] in ("done_interview", "done_bio", "done_product") and data in ("bio","product","jtbd"):
        await ctx.bot.send_message(chat_id=cid, text="‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø.")

async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    text = update.message.text.strip()

    if not sess or sess["stage"] == "welcome":
        return await ctx.bot.send_message(chat_id=cid, text="–ù–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

    if sess["stage"] == "interview":
        sess["answers"].append(text)
        idx = len(sess["answers"])

        comment = await get_feedback(text)
        await ctx.bot.send_message(chat_id=cid, text=comment)

        if idx < len(INTERVIEW_Q):
            await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[idx])
        else:
            sess["stage"] = "done_interview"
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU]
            await ctx.bot.send_message(chat_id=cid, text="‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "done_interview" and text.lower() == "bio":
        sess["stage"] = "bio"
        prompt = "–°—Ñ–æ—Ä–º–∏—Ä—É–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ BIO: –∫–∞–∂–¥—ã–π ‚Äî 3 —Ç–µ–∑–∏—Å–∞ –¥–æ 180 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n" + "\n".join(sess["answers"])
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        result = resp.choices[0].message.content
        await ctx.bot.send_message(chat_id=cid, text=result)
        comment = await get_feedback(result)
        await ctx.bot.send_message(chat_id=cid, text=comment)
        sess["stage"] = "done_bio"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c != "bio"]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "done_bio" and text.lower() == "product":
        sess["stage"] = "product_ask"
        sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞ –∏ –∫–æ–º—É –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç.")

    elif sess["stage"] == "product_ask":
        sess["product_answers"].append(text)
        prompts = ["–ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ—Ç?", "–î–ª—è –∫–æ–≥–æ?", "–ü–æ—á–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ?"]
        if len(sess["product_answers"]) < len(prompts)+1:
            await ctx.bot.send_message(chat_id=cid, text=prompts[len(sess["product_answers"])-1])
        else:
            prompt = "\n".join(sess["product_answers"])
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
            result = resp.choices[0].message.content
            await ctx.bot.send_message(chat_id=cid, text=result)
            comment = await get_feedback(result)
            await ctx.bot.send_message(chat_id=cid, text=comment)
            sess["stage"] = "done_product"
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="product"]
            await ctx.bot.send_message(chat_id=cid, text="–û—Ç–ª–∏—á–Ω–æ! –ß–µ–≥–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "done_product" and text.lower() == "jtbd":
        prompt = (
            "–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
            + "\n".join(sess["answers"]) + "\n" +
            "\n".join(sess["product_answers"])
            + "\n–í–∫–ª—é—á–∏ —Ç—Ä–∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞."
        )
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
        sess["stage"] = "done_jtbd"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in FINAL_MENU]
        await ctx.bot.send_message(chat_id=cid, text="–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "done_jtbd":
        resp_map = {
            "get_access": "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚Äî –≤–æ—Ç —Å—Å—ã–ª–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: [–æ–ø–ª–∞—Ç–∏—Ç—å]",
            "have": "–°—É–ø–µ—Ä! –ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —É–∂–µ –≤–Ω–µ–¥—Ä—è–µ—à—å.",
            "later": "–ü–æ–Ω—è–ª–∞, –Ω–∞–ø–æ–º–Ω—é –æ –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ –ø–æ–∑–∂–µ üòâ"
        }
        key = text.lower().replace(" ", "_")
        await ctx.bot.send_message(chat_id=cid, text=resp_map.get(key, "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"), parse_mode="Markdown")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
