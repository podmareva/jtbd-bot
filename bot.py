import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ;\n"
    "‚Ä¢ —Å–æ–∑–¥–∞—Ç—å Bio –¥–ª—è Instagram;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://...) –∏ "
    "[–î–æ–≥–æ–≤–æ—Ä–æ–º‚Äë–æ—Ñ–µ—Ä—Ç–æ–π](https://...).\n\n"
    "‚úÖ –ù–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
)

INTERVIEW_Q = [  # 15 –≤–æ–ø—Ä–æ—Å–æ–≤
    "1. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ —Å–µ–±–µ –∏ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ.",
    "2. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞–∂–Ω—ã –¥–ª—è —Ç–µ–±—è –ª–∏—á–Ω–æ –∏ –≤ —Ä–∞–±–æ—Ç–µ?",
    "3. –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?",
    "4. –ö–∞–∫–∏–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç—ã –≤–∏–¥–∏—à—å —É —Å–µ–±—è?",
    "5. –í —á—ë–º —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–∞?",
    "6. –ö–∞–∫—É—é –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å —Ä–µ—à–∞—Ç—å?",
    "7. –ß—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç —Ç–µ–±—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤?",
    "8. –ö—Ç–æ —Ç–≤–æ—è –∏–¥–µ–∞–ª—å–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?",
    "9. –ö–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω—ã?",
    "10. –ö–∞–∫ —Ç–µ–±—è –≤–∏–¥—è—Ç –æ–∫—Ä—É–∂–∞—é—â–∏–µ?",
    "11. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –ª—é–¥–∏ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏, –∫–æ–≥–¥–∞ –≤–∏–¥—è—Ç —Ç–≤–æ–∏ —Ä–∞–±–æ—Ç—ã?",
    "12. –ö–∞–∫–∏–µ –æ—Ç–∑—ã–≤—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –¥–æ—Ä–æ–≥–∏?",
    "13. –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π —Å—Ç–∞–≤–∏—à—å –≤ —Ä–∞–±–æ—Ç–µ?",
    "14. –ß—Ç–æ —Ç–µ–±—è –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–π—á–∞—Å?",
    "15. –ó–∞ —á—Ç–æ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è?"
]

MAIN_MENU = [
    ("üìå Bio", "bio"),
    ("üéØ –ü—Ä–æ–¥—É–∫—Ç/–£—Å–ª—É–≥–∞", "product"),
    ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")
]

FINAL_MENU = [
    ("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "get_access"),
    ("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", "have"),
    ("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", "later")
]


async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage": "welcome", "answers": [], "positioning": "", "product": [], "ca": []}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê", callback_data="agree")]]
    await ctx.bot.send_message(chat_id=cid, text=WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))


async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    data = update.callback_query.data
    sess = sessions.get(cid)
    await update.callback_query.answer()
    if not sess:
        return

    stage = sess["stage"]

    if stage == "welcome" and data == "agree":
        sess["stage"] = "interview"
        await ctx.bot.send_message(chat_id=cid, text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ –∏ —á–µ—Å—Ç–Ω–æ üëá")
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0])
        return

    if stage in ("welcome", "interview"):
        await ctx.bot.send_message(chat_id=cid, text="–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É, –æ—Ç–≤–µ—á–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")
        return

    if stage == "done_interview" and data == "bio":
        prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –Ω–∞–ø–∏—à–∏ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ bio –¥–ª—è Instagram (–¥–æ 180 —Å–∏–º–≤–æ–ª–æ–≤):\n" + "\n".join(sess["answers"])
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
        await ctx.bot.send_message(chat_id=cid, text="üí° –í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã Bio –¥–ª—è Instagram:\n" + resp.choices[0].message.content)
        sess["stage"] = "done_bio"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU if c != "bio"]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if stage in ("done_interview", "done_bio") and data == "product":
        sess["stage"] = "product"
        await ctx.bot.send_message(chat_id=cid, text="üéØ –û—Ç–ª–∏—á–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ, –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—É.")
        return

    if stage == "done_product" and data == "jtbd":
        sess["stage"] = "jtbd"
        await ctx.bot.send_message(chat_id=cid, text="üîç –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑ –¶–ê, –∂–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        # –∞–Ω–∞–ª–∏–∑ JTBD –ø–æ –æ—Ç–≤–µ—Ç—É —Å–µ—Å—Å–∏–∏
        prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –ø–æ JTBD –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n" + "\n".join(sess["product"])
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text="üìä –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê:\n" + resp.choices[0].message.content)
        sess["stage"] = "done_jtbd"
        kb = [
            [InlineKeyboardButton("üëç –î–∞, –µ—â—ë –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ", callback_data="add_ca")],
            [InlineKeyboardButton("‚úÖ –•–≤–∞—Ç–∏—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="skip_ca")]
        ]
        await ctx.bot.send_message(chat_id=cid, text="–•–æ—á–µ—à—å –µ—â—ë 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if stage == "done_jtbd" and data == "add_ca":
        prompt = "–î–æ–±–∞–≤—å 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê –ø–æ JTBD –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text="üåü –ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê:\n" + resp.choices[0].message.content)
        sess["stage"] = "final"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in FINAL_MENU]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if stage in ("done_jtbd", "final") and data in ("get_access", "have", "later"):
        texts = {
            "get_access": "ü™Ñ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: https://your-link.com",
            "have": "‚úÖ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢—ã –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—à—å —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ—Ü—Å–µ—Ç–µ–π ‚Äî —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
            "later": "‚è≥ –û–±—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞), —è –≤–µ—Ä–Ω—É—Å—å —Å–≤–µ–∂–∏–º–∏ –∏–¥–µ—è–º–∏!"
        }
        await ctx.bot.send_message(chat_id=cid, text=texts[data])
        await ctx.bot.send_message(chat_id=cid, text="‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –∏–ª–∏ –ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
        return


async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    if not sess:
        return

    text = update.message.text.strip()

    if sess["stage"] == "interview":
        sess["answers"].append(text)
        idx = len(sess["answers"])
        if idx < len(INTERVIEW_Q):
            await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[idx])
        else:
            # –∏—Ç–æ–≥–æ–≤–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ + –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–≤–µ–¥–∏ –∏—Ö –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:"
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt + "\n" + "\n".join(sess["answers"])}])
            await ctx.bot.send_message(chat_id=cid, text="‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n" + resp.choices[0].message.content)
            sess["stage"] = "done_interview"
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU]
            await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "product":
        sess["product"].append(text)
        prompt = (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –¥–∞–π 3‚Äì4 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞:\n" +
            "\n".join(sess["product"]) +
            "\n\n–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –±–æ–ª–µ–µ –∂–∏–≤–æ–π, —Ü–µ–Ω–Ω–æ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞?"
        )
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text="üéØ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞:\n" + resp.choices[0].message.content)
        sess["stage"] = "done_product"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU if c != "product"]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    else:
        await ctx.bot.send_message(chat_id=cid, text="–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()


if __name__ == "__main__":
    main()
