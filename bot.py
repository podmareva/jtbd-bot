import os
import asyncio
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/‚Ä¶) –∏ "
    "[–î–æ–≥–æ–≤–æ—Ä–æ–º‚Äë–æ—Ñ–µ—Ä—Ç—ã](https://docs.google.com/‚Ä¶).\n\n"
    "‚úÖ –ù–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å."
)

INTERVIEW_Q = [
    "1. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ: –∫—Ç–æ —Ç—ã –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –∏ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
    "2. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É–±–µ–∂–¥–µ–Ω–∏—è –≤–∞–∂–Ω—ã –¥–ª—è —Ç–µ–±—è?",
    "3. –ß—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç —Ç–µ–±—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤?",
    "4. –ö–∞–∫–∏–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —Ç—ã –º–æ–∂–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å?",
    "5. –ö–∞–∫–∏–µ —á–µ—Ä—Ç—ã —Ç–≤–æ–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥–∞—é—Ç –≤ —Ä–∞–±–æ—Ç–µ?",
    "6. –ö–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–æ—Ä–¥–∏—à—å—Å—è –æ—Å–æ–±–µ–Ω–Ω–æ?",
    "7. –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è —Ä–µ—à–∞—Ç—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "8. –ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?",
    "9. –ö–∞–∫ –±—ã —Ç—ã –æ–ø–∏—Å–∞–ª–∞ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç?",
    "10. –ö–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏–ª–∏ –ø–æ–¥—Ö–æ–¥—ã —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å?",
    "11. –ö–∞–∫–∞—è —Ü–µ–ª—å –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å—Ç–æ–∏—Ç —Å–µ–π—á–∞—Å?",
    "12. –ß—Ç–æ –º–µ—à–∞–µ—Ç —Ç–µ–±–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥?",
    "13. –ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–µ–±–µ –∫–ª–∏–µ–Ω—Ç—ã?",
    "14. –ö–∞–∫–∏–µ –æ—Ç–∑—ã–≤—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å?",
    "15. –ß—Ç–æ –±—ã —Ç—ã –∏–∑–º–µ–Ω–∏–ª–∞ –≤ —Å–≤–æ—ë–º –ø–æ–¥—Ö–æ–¥–µ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?"
]

MAIN_MENU = [
    ("üì± BIO", "bio"),
    ("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞", "product"),
    ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")
]

FINAL_MENU = [
    ("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "get_access"),
    ("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", "have"),
    ("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", "later")
]

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage": "welcome", "answers": [], "product_answers": [], "position": ""}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê", callback_data="agree")]]
    await ctx.bot.send_message(chat_id=cid, text=WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    query = update.callback_query
    data = query.data
    sess = sessions.get(cid)
    await query.answer()
    if not sess:
        return

    stage = sess["stage"]

    if stage == "welcome" and data == "agree":
        sess["stage"] = "interview"
        await ctx.bot.send_message(chat_id=cid, text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ –∏ —á–µ—Å—Ç–Ω–æ üëá")
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0])

    elif stage in ("interview",) and data in ("bio","product","jtbd"):
        await ctx.bot.send_message(chat_id=cid, text="‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤—Å–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤.")

    elif stage == "done_interview" and data == "bio":
        sess["stage"] = "bio"
        prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (" + sess["position"] + ") –Ω–∞–ø–∏—à–∏ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ bio –¥–ª—è Instagram –ø–æ 180 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥—ã–π."
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
        sess["stage"] = "done_bio"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="bio"]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif stage in ("done_interview","done_bio") and data == "product":
        sess["stage"] = "product_ask"
        sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="üéØ –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ ‚Äî –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞–º.")

    elif stage == "done_product" and data == "jtbd":
        sess["stage"] = "jtbd"
        await generate_jtbd(cid, ctx)

    elif stage == "done_jtbd" and data in ("get_access","have","later"):
        msgs = {
            "get_access": "üëâ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É:\nhttps://your-link.com",
            "have": "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é! –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —á—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç üòä",
            "later": "üöÄ –í—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! –û–±—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞."
        }
        await ctx.bot.send_message(chat_id=cid, text=msgs[data])
        return

async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    if not sess:
        return
    text = update.message.text.strip()

    if sess["stage"] == "interview":
        sess["answers"].append(text)
        # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await ctx.bot.send_message(chat_id=cid, text=f"üëç –°–ø–∞—Å–∏–±–æ! –ü—Ä–∏–Ω—è–ª–∞: ¬´{text}¬ª ‚Äî –¥–µ—Ä–∂–∏–º —Ç–µ–º—É.")

        idx = len(sess["answers"])
        if idx < 15:
            await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[idx])
        else:
            # –≥–æ—Ç–æ–≤–∏–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–¥–µ–ª–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏ (1‚Äì2 –∞–±–∑–∞—Ü–∞). –û—Ç–≤–µ—Ç:\n" + "\n".join(sess["answers"])
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
            session_position = resp.choices[0].message.content
            sess["position"] = session_position
            await ctx.bot.send_message(chat_id=cid, text="‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–∞:\n" + session_position)
            sess["stage"] = "done_interview"
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU]
            await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "product_ask":
        sess["product_answers"].append(text)
        step = len(sess["product_answers"])
        headers = [
            "–°–ø–∞—Å–∏–±–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ? –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ä–µ—à–∞–µ—Ç —Ç–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç.",
            "–†–∞—Å—Å–∫–∞–∂–∏, –∫–æ–º—É –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç ‚Äî –∫—Ç–æ —Ç–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç?",
            "–ü–æ—á–µ–º—É –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –∞–Ω–∞–ª–æ–≥–æ–≤ ‚Äî —á—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤ –Ω—ë–º?",
            "–ö–∞–∫–∏–µ –≤—ã–≥–æ–¥—ã –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç?"]
        if step <= 4:
            await ctx.bot.send_message(chat_id=cid, text=headers[step-1])
        if step == 4:
            # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
            prompt = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –¥–∞–π 3‚Äì4 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞: –∫–∞–∫ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º."
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content": prompt + "\n" + "\n".join(sess["product_answers"]) }])
            await ctx.bot.send_message(chat_id=cid, text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É:\n" + resp.choices[0].message.content)
            sess["stage"] = "done_product"
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="product"]
            await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    # JTBD –±–æ—Ç –Ω–µ –ø—Ä–æ–ø–∏—Å–∞–Ω –∑–¥–µ—Å—å ‚Äî –≤—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä

async def generate_jtbd(cid, ctx):
    sess = sessions[cid]
    prompt_main = "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ 3 —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê –ø–æ JTBD –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:\n" + "\n".join(sess["product_answers"])
    resp_main = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content": prompt_main}])
    main_segs = resp_main.choices[0].message.content

    await ctx.bot.send_message(chat_id=cid, text="üîç –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê:\n" + main_segs)
    await ctx.bot.send_message(chat_id=cid, text="–•–æ—á–µ—à—å –µ—â—ë 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê? –î–∞ / –ù–µ—Ç")

    sess["stage"] = "jtbd_wait_more"
    sess["jtbd_main"] = main_segs

async def jtbd_followup(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    if sess and sess["stage"] == "jtbd_wait_more":
        text = update.message.text.lower()
        if text.startswith("–¥–∞"):
            prompt_extra = "–¢–µ–ø–µ—Ä—å –≤—ã–¥–∞–π 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ —Ä–∞–∑–≤–µ—Ä–Ω–∏ –∫–∞–∂–¥—ã–π:"
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content": prompt_extra}])
            await ctx.bot.send_message(chat_id=cid, text="–ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:\n" + resp.choices[0].message.content)
        sess["stage"] = "done_jtbd"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in FINAL_MENU]
        await ctx.bot.send_message(chat_id=cid, text="–ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, jtbd_followup))
    asyncio.run(app.run_polling())

if __name__ == "__main__":
    main()
