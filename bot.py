import os
from datetime import datetime
import secrets

from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters, ContextTypes
)

# –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å openai ‚Äî –æ—Å—Ç–∞–≤—å
import openai

# –ë–î (psycopg v3)
import psycopg
from psycopg.rows import dict_row

# ------------------ ENV ------------------
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN   = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_ID    = int(os.getenv("ADMIN_ID", "0"))

# username –±–æ—Ç–∞-—Ä–∞—Å–ø–∞–∫–æ–≤—â–∏–∫–∞ (–±–µ–∑ @)
BOT_NAME = os.getenv("MAIN_BOT_USERNAME", "jtbd_assistant_bot")

# ------------------ DB runner (–±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è) ------------------
def db_run(sql: str, args: tuple = (), fetch: str | None = None):
    """
    –í—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Å –Ω–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ 1 —Ä–µ—Ç—Ä–∞–µ–º.
    fetch=None -> execute
    fetch='one' -> fetchone()
    fetch='all' -> fetchall()
    """
    try:
        with psycopg.connect(
            DATABASE_URL,
            sslmode="require",
            autocommit=True,
            row_factory=dict_row,
            keepalives=1, keepalives_idle=30, keepalives_interval=10, keepalives_count=5
        ) as conn:
            with conn.cursor() as cur:
                cur.execute(sql, args)
                if fetch == "one":
                    return cur.fetchone()
                if fetch == "all":
                    return cur.fetchall()
                return None
    except psycopg.OperationalError:
        with psycopg.connect(
            DATABASE_URL,
            sslmode="require",
            autocommit=True,
            row_factory=dict_row,
            keepalives=1, keepalives_idle=30, keepalives_interval=10, keepalives_count=5
        ) as conn:
            with conn.cursor() as cur:
                cur.execute(sql, args)
                if fetch == "one":
                    return cur.fetchone()
                if fetch == "all":
                    return cur.fetchall()
                return None

# ------------------ –°—Ö–µ–º–∞ –ë–î ------------------
db_run("""CREATE TABLE IF NOT EXISTS tokens(
  token TEXT PRIMARY KEY,
  bot_name TEXT NOT NULL,
  user_id BIGINT NOT NULL,
  expires_at TIMESTAMPTZ NULL
);""")

db_run("""CREATE TABLE IF NOT EXISTS allowed_users(
  user_id BIGINT NOT NULL,
  bot_name TEXT NOT NULL,
  PRIMARY KEY(user_id, bot_name)
);""")

# –ù–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã:
db_run("ALTER TABLE tokens ADD COLUMN IF NOT EXISTS expires_at TIMESTAMPTZ NULL;")

# ------------------ –î–∞–Ω–Ω—ã–µ/—Å–µ—Å—Å–∏–∏ ------------------
WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –î–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç –∫–∞—Å—Å–∏—Ä–∞.\n"
    "‚úÖ –û—Ç–∫—Ä–æ–π –º–µ–Ω—è –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏ ¬´–°–¢–ê–†–¢¬ª."
)

INTERVIEW_Q = [
    "1. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ. –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
    "2. –ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ?",
    "3. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –∫–ª—é—á–µ–≤—ã–º–∏ –≤ –∂–∏–∑–Ω–∏ –∏ –≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "4. –í —á—ë–º —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ—é –º–∏—Å—Å–∏—é –∏–ª–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?",
    "5. –ß—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–≤–æ–∏–º –≥–ª–∞–≤–Ω—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º?",
    "6. –ö–∞–∫–∏–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–º–æ–≥–∞—é—Ç —Ç–µ–±–µ –≤ —Ä–∞–±–æ—Ç–µ?",
    "7. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–ª–∏ —É–±–µ–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–µ—à—å—Å—è?",
    "8. –ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –±–ª–∏–∑–∫–∏ –∏ –≤–∞–∂–Ω—ã?",
    "9. –ö–∞–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è?",
    "10. –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "11. –ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±—è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏?",
    "12. –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–∑—ã–≤–∞—Ç—å —É —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏?",
    "13. –í —á—ë–º —Ç—ã –æ—Ç–ª–∏—á–∞–µ—à—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö –≤ —Å–≤–æ–µ–π –Ω–∏—à–µ?",
    "14. –ö–∞–∫–æ–π –æ–±—Ä–∞–∑ —Ç—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è —Å–æ–∑–¥–∞—Ç—å –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö?",
    "15. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –ª—é–¥–∏ –≥–æ–≤–æ—Ä–∏–ª–∏ –æ —Ç–µ–±–µ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–≤–æ–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–º?"
]

PRODUCT_Q = [
    "1. –û–ø–∏—à–∏ —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ.",
    "2. –ß–µ–º –æ–Ω —Ä–µ–∞–ª—å–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É?",
    "3. –í —á–µ–º —Ç–≤–æ–µ/–µ–≥–æ –≥–ª–∞–≤–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö —Ä–µ—à–µ–Ω–∏–π –Ω–∞ —Ä—ã–Ω–∫–µ?",
    "4. –ö–∞–∫–æ–π –≥–ª–∞–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–±–æ–π –∏–ª–∏ —Ç–≤–æ–∏–º –ø—Ä–æ–¥—É–∫—Ç–æ–º?"
]

MAIN_MENU = [
    ("üì± BIO", "bio"),
    ("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞", "product"),
    ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")
]

sessions = {}

# ------------------ –î–æ—Å—Ç—É–ø ------------------
def is_allowed(user_id: int) -> bool:
    row = db_run(
        "SELECT 1 FROM allowed_users WHERE user_id=%s AND bot_name=%s",
        (user_id, BOT_NAME),
        fetch="one",
    )
    return row is not None

def try_accept_token(user_id: int, token: str) -> tuple[bool, str]:
    if not token:
        return False, "‚õî –î–æ—Å—Ç—É–ø –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–∞—Å—Å–∏—Ä–∞ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø."

    row = db_run("SELECT * FROM tokens WHERE token=%s", (token,), fetch="one")
    if not row:
        return False, "‚õî –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞."

    if row["bot_name"] != BOT_NAME:
        return False, "‚õî –≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤—ã–¥–∞–Ω –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞."

    exp = row.get("expires_at")
    if exp and datetime.utcnow() > exp.replace(tzinfo=None):
        return False, "‚õî –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–∞—Å—Å–∏—Ä–∞ –≤—ã–¥–∞—Ç—å –Ω–æ–≤—É—é."

    # OK ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∏ —Å–∂–∏–≥–∞–µ–º —Ç–æ–∫–µ–Ω
    db_run(
        "INSERT INTO allowed_users(user_id, bot_name) VALUES(%s,%s) ON CONFLICT DO NOTHING",
        (user_id, BOT_NAME)
    )
    db_run("DELETE FROM tokens WHERE token=%s", (token,))
    return True, "‚úÖ –î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ú–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."

def _uid_from_update(update):
    if getattr(update, "effective_user", None):
        return update.effective_user.id
    if getattr(update, "callback_query", None):
        return update.callback_query.from_user.id
    return None

def require_access(fn):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø (–∫—Ä–æ–º–µ /start)."""
    async def wrapper(update, context, *args, **kwargs):
        uid = _uid_from_update(update)
        if ADMIN_ID and uid == ADMIN_ID:
            return await fn(update, context, *args, **kwargs)
        if uid is None or not is_allowed(uid):
            if getattr(update, "message", None):
                await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç –∫–∞—Å—Å–∏—Ä–∞.")
            elif getattr(update, "callback_query", None):
                await update.callback_query.answer("‚õî –î–æ—Å—Ç—É–ø –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –æ—Ç –∫–∞—Å—Å–∏—Ä–∞.", show_alert=True)
            return
        return await fn(update, context, *args, **kwargs)
    return wrapper

async def send_welcome(ctx: ContextTypes.DEFAULT_TYPE, uid: int):
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–Ω—Ç–µ—Ä–≤—å—é
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω(–∞) ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É", callback_data="agree")]
    ])
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    sessions[uid] = {
        "stage": "welcome",
        "answers": [],
        "product_answers": [],
        "products": []
    }
    await ctx.bot.send_message(chat_id=uid, text=WELCOME, reply_markup=kb)

# ------------------ HANDLERS ------------------
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid  = update.effective_user.id
    args = ctx.args or []

    # –£–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø? –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
    if is_allowed(uid):
        await update.message.reply_text("üîì –î–æ—Å—Ç—É–ø —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É.")
        await send_welcome(ctx, uid)
        return

    # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—è—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ /start <token>
    token = args[0] if args else ""
    ok, msg = try_accept_token(uid, token)
    await update.message.reply_text(msg)

    if ok:
        # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        await send_welcome(ctx, uid)
        return
    else:
        # –ë–µ–∑ —Ç–æ–∫–µ–Ω–∞ ‚Äî –¥–∞–ª—å—à–µ –Ω–µ –∏–¥—ë–º
        return

# –ê–¥–º–∏–Ω: —Ä—É—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ Postgres –¥–ª—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞
async def gentoken(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    if not ctx.args or not ctx.args[0].isdigit():
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gentoken <user_id>")
        return
    target_id = int(ctx.args[0])
    token = secrets.token_urlsafe(8)
    # –±–µ–∑ TTL (–∏–ª–∏ –¥–æ–±–∞–≤—å expires_at —Ç–µ–ø–µ—Ä—å()+interval)
    db_run(
        "INSERT INTO tokens(token, bot_name, user_id, expires_at) VALUES(%s,%s,%s,NULL) ON CONFLICT DO NOTHING",
        (token, BOT_NAME, target_id)
    )
    link = f"https://t.me/{BOT_NAME}?start={token}"
    await update.message.reply_text(
        f"‚úÖ –¢–æ–∫–µ–Ω: <code>{token}</code>\nüîó –°—Å—ã–ª–∫–∞: {link}",
        parse_mode="HTML"
    )

@require_access
async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    query = update.callback_query
    data = query.data
    sess = sessions.get(cid)
    await query.answer()
    if not sess:
        return

    # --- –°–æ–≥–ª–∞—Å–∏–µ ---
    if sess["stage"] == "welcome" and data == "agree":
        sess["stage"] = "interview"
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —á–µ—Å—Ç–Ω–æ üëá"
        )
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0])
        return

    # --- BIO –ø–æ –∫–Ω–æ–ø–∫–µ ---
    if sess["stage"] == "done_interview" and data == "bio":
        sess["stage"] = "bio"
        await generate_bio(cid, sess, ctx)
        return

    # --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç—É ---
    if sess["stage"] in ("done_interview", "done_bio") and data == "product":
        sess["stage"] = "product_ask"
        sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text=PRODUCT_Q[0])
        return

    # --- –°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç (–º—É–ª—å—Ç–∏–ø—Ä–æ–¥—É–∫—Ç!) ---
    if sess["stage"] == "product_finished" and data == "add_product":
        sess["stage"] = "product_ask"
        sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="–û–∫–µ–π! –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–æ–≤–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ üëá\n" + PRODUCT_Q[0])
        return

    if sess["stage"] == "product_finished" and data == "finish_products":
        await ctx.bot.send_message(chat_id=cid, text="–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É –¶–ê...")
        await start_jtbd(cid, sess, ctx)
        return

    # --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ JTBD ---
    if sess["stage"] in ("done_interview", "done_bio", "done_product") and data == "jtbd":
        await start_jtbd(cid, sess, ctx)
        return

    # JTBD –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    if sess["stage"] == "jtbd_done" and data == "jtbd_again":
        await start_jtbd(cid, sess, ctx)
        return
    if sess["stage"] == "jtbd_done" and data == "finish_unpack":
        await ctx.bot.send_message(
            chat_id=cid,
            text="‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                 "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ö–æ–Ω—Ç–µ–Ω—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ –∏–¥–µ–π. "
                 "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –ø–∏—à–∏!"
        )
        return

    if data == "jtbd_more" and sess.get("stage") == "jtbd_first":
        await handle_more_jtbd(update, ctx)
        return

    if data == "jtbd_done" and sess.get("stage") == "jtbd_first":
        await handle_skip_jtbd(update, ctx)
        return

@require_access
async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    text = (update.message.text or "").strip()
    if not sess:
        return

@require_access
async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    text = (update.message.text or "").strip()

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç–∞–Ω—É–ª—Å—è) ‚Äî –ø–æ–∫–∞–∂–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if not sess:
        await send_welcome(ctx, cid)
        return

    # ---------- INTERVIEW FLOW ----------
    if sess["stage"] == "interview":
        sess["answers"].append(text)
        try:
            comment = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–æ—É—á. –ù–∞ ¬´—Ç—ã¬ª. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–≤–µ—Ç—É ‚Äî –ø–æ —Ç–µ–º–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤."},
                    {"role": "user", "content": text}
                ]
            )
            await ctx.bot.send_message(chat_id=cid, text=comment.choices[0].message.content)
        except Exception as e:
            await ctx.bot.send_message(chat_id=cid, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
            print("OpenAI comment error:", e)

        idx = len(sess["answers"])
        if idx < len(INTERVIEW_Q):
            await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[idx])
        else:
            print(f"[INFO] –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è cid {cid}")
            await finish_interview(cid, sess, ctx)
        return

    # ---------- PRODUCT FLOW —Å –º—É–ª—å—Ç–∏–ø—Ä–æ–¥—É–∫—Ç–æ–º ----------
    if sess["stage"] == "product_ask":
        sess["product_answers"].append(text)
        idx = len(sess["product_answers"])
        if idx < len(PRODUCT_Q):
            await ctx.bot.send_message(chat_id=cid, text=PRODUCT_Q[idx])
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç (–≤—Å–µ –µ–≥–æ –æ—Ç–≤–µ—Ç—ã)
            sess.setdefault("products", []).append(sess["product_answers"].copy())
            await generate_product_analysis(cid, sess, ctx)
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º: –µ—Å—Ç—å –ª–∏ –µ—â—ë –ø—Ä–æ–¥—É–∫—Ç—ã?
            kb = [
                [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
                [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É –¶–ê", callback_data="finish_products")]
            ]
            await ctx.bot.send_message(
                chat_id=cid,
                text="–°–ø–∞—Å–∏–±–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –ø–æ–ª—É—á–µ–Ω—ã.\n–•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –µ—â—ë –æ–± –æ–¥–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ?",
                reply_markup=InlineKeyboardMarkup(kb)
            )
            sess["stage"] = "product_finished"
        return

# ------------------ –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ ------------------
async def finish_interview(cid, sess, ctx):
    answers = "\n".join(sess["answers"])
    style_note = (
        "\n\n–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å, –ª–µ–∫—Å–∏–∫—É, —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. "
        "–ü–∏—à–∏ –≤ –µ–≥–æ –º–∞–Ω–µ—Ä–µ ‚Äî –Ω–µ –ø–µ—Ä–µ—É—Å–ª–æ–∂–Ω—è–π, –Ω–µ –¥–æ–±–∞–≤–ª—è–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã, —Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å."
    )
    unpack = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—É—á –∏ –±—Ä–µ–Ω–¥-—Å—Ç—Ä–∞—Ç–µ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫—É—é, –ø–æ–¥—Ä–æ–±–Ω—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏: "
                    "—Ä–∞—Å–∫—Ä–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏, –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–±–µ–∂–¥–µ–Ω–∏—è, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã, –º–æ—Ç–∏–≤—ã, –ª–∏—á–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, "
                    "—Ü–µ–ª–∏, –º–∏—Å—Å–∏—é, –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Ç—Ä–∏–≥–≥–µ—Ä—ã, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏ –∂–∏–≤—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏, "
                    "—Ä–∞–∑–±–∏–≤–∞—è –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–º –±–ª–æ–∫–∞–º —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. –§–æ—Ä–º–∞—Ç ‚Äî Markdown."
                    + style_note
                )
            },
            {"role": "user", "content": answers}
        ]
    )
    unpack_text = unpack.choices[0].message.content
    sess["unpacking"] = unpack_text
    await send_long_message(ctx, cid, "‚úÖ –¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞:\n\n" + unpack_text)

    pos = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –±—Ä–µ–Ω–¥-—Å—Ç—Ä–∞—Ç–µ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ "
                    "–≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ ‚Äî –æ—Ç –ª–∏—Ü–∞ —á–µ–ª–æ–≤–µ–∫–∞ (1‚Äì2 –∞–±–∑–∞—Ü–∞ –æ —Å–µ–±–µ), –∑–∞—Ç–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π: "
                    "‚Äî –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è\n"
                    "‚Äî –∫–ª—é—á–µ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n"
                    "‚Äî —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã\n"
                    "‚Äî –ø–æ—Å–ª–∞–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
                    "‚Äî –º–∏—Å—Å–∏—è\n"
                    "‚Äî —Å–ª–æ–≥–∞–Ω (1 —Ñ—Ä–∞–∑–∞)\n"
                    "‚Äî —Ü–µ–ª—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n"
                    "‚Äî —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏ –æ—Ç–ª–∏—á–∏—è\n"
                    "‚Äî –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–∞–π –æ–±—â–∏–π –∞–±–∑–∞—Ü –æ —á–µ–ª–æ–≤–µ–∫–µ, –∑–∞—Ç–µ–º ‚Äî –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏. –í—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Å—Ç–∏–ª—å–Ω–æ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ. –§–æ—Ä–º–∞—Ç Markdown."
                    + style_note
                )
            },
            {"role": "user", "content": unpack_text}
        ]
    )
    positioning_text = pos.choices[0].message.content
    sess["positioning"] = positioning_text

    await send_long_message(ctx, cid, "üéØ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n" + positioning_text)

    sess["stage"] = "done_interview"
    kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU]
    await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

async def generate_bio(cid, sess, ctx):
    style_note = "\n\n–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å –∏ –ª–µ–∫—Å–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–∏—à–∏ —Ñ—Ä–∞–∑—ã –≤ –µ–≥–æ –º–∞–Ω–µ—Ä–µ."
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ BIO –¥–ª—è —à–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è Instagram –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî 2‚Äì3 —Ü–µ–ø–ª—è—é—â–∏—Ö, –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö —Ñ—Ä–∞–∑—ã –ø–æ–¥—Ä—è–¥, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Å–ª—ç—à–∞–º–∏ (¬´/¬ª), –±–µ–∑ —Å–ø–∏—Å–∫–æ–≤, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –Ω–µ –±–æ–ª–µ–µ 180 —Å–∏–º–≤–æ–ª–æ–≤. "
        "–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è Markdown –∏ –±–µ–∑ –Ω–æ–º–µ—Ä–æ–≤. –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ‚Äî –∂–∏–≤—ã–µ, –≤ —Å—Ç–∏–ª–µ Instagram: –≤—ã–∑—ã–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å, –¥–æ–±–∞–≤—å call-to-action –∏–ª–∏ —ç–º–æ—Ü–∏—é."
        + style_note + "\n\n" + sess["positioning"]
    )
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
    await ctx.bot.send_message(chat_id=cid, text="üì± –í–∞—Ä–∏–∞–Ω—Ç—ã BIO:\n\n" + resp.choices[0].message.content)
    sess["stage"] = "done_bio"
    kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU if c != "bio"]
    await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

async def generate_product_analysis(cid, sess, ctx):
    style_note = "\n\n–°–æ—Ö—Ä–∞–Ω—è–π —Å—Ç–∏–ª—å, –ª–µ–∫—Å–∏–∫—É –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Å—è –Ω–∞ –µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏)."
    answers = "\n".join(sess["product_answers"])
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–µ, –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è Telegram –≤ 3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. "
        "–†–∞—Å–∫—Ä–æ–π —Å—É—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞, –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≥–æ–¥—ã, –æ—Ç–ª–∏—á–∏—è –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞. –Ø–∑—ã–∫ ‚Äî —Ä—É—Å—Å–∫–∏–π, —Å—Ç–∏–ª—å –¥–µ–ª–æ–≤–æ–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π."
        + style_note + "\n\n" + answers
    )
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
    await ctx.bot.send_message(chat_id=cid, text="üìù –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞:\n\n" + resp.choices[0].message.content)

async def send_long_message(ctx, cid, text):
    MAX_LEN = 4000
    for i in range(0, len(text), MAX_LEN):
        await ctx.bot.send_message(chat_id=cid, text=text[i:i+MAX_LEN], parse_mode="HTML")

@require_access
async def start_jtbd(cid, sess, ctx):
    all_products = []
    for prod in sess.get("products", []):
        all_products.append("\n".join(prod))
    ctx_text = "\n".join(sess["answers"]) + "\n" + "\n\n".join(all_products)
    style_note = "\n\n–ü–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏, –≤ —Å—Ç–∏–ª–µ –∏ –ª–µ–∫—Å–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤."
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å –†–û–í–ù–û 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–¶–ê), —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É –∏ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π:\n\n"
        "<b>–°–µ–≥–º–µ–Ω—Ç 1: ...</b>\n"
        "<u>JTBD:</u> ...\n\n"
        "<u>–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:</u> ...\n\n"
        "<u>–ë–æ–ª–∏:</u> ...\n\n"
        "<u>–†–µ—à–µ–Ω–∏—è:</u> ...\n\n"
        "<u>–¢–µ–º—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</u> ...\n\n"
        "<u>–ü—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏–∫–∞:</u> ...\n\n"
        "<u>–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è:</u> ...\n\n"
        "<u>–û—Ñ—Ñ–µ—Ä:</u> ...\n\n"
        "–û—Ñ–æ—Ä–º–∏ —Å—Ç—Ä–æ–≥–æ 5 —Ç–∞–∫–∏—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º. –¢–æ–ª—å–∫–æ HTML-—Ç–µ–≥–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è. –û—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
        + style_note +
        "\n\n–ò—Å—Ö–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + ctx_text
    )
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
    await send_long_message(ctx, cid, "üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê:\n\n" + resp.choices[0].message.content)
    await ctx.bot.send_message(
        chat_id=cid,
        text="–•–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–•–æ—á—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã", callback_data="jtbd_more")],
            [InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—é", callback_data="jtbd_done")]
        ])
    )
    sess["stage"] = "jtbd_first"

@require_access
async def handle_more_jtbd(update, ctx):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    all_products = []
    for prod in sess.get("products", []):
        all_products.append("\n".join(prod))
    ctx_text = "\n".join(sess["answers"]) + "\n" + "\n\n".join(all_products)
    style_note = (
        "\n\n–ü–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, –≤ —Å—Ç–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–∞–π –Ω–µ –º–µ–Ω–µ–µ 5 –∏–¥–µ–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞. "
        "–ü—Å–∏—Ö–æ–≥—Ä–∞—Ñ–∏–∫—É —Ä–∞–∑–±–µ–π –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —Ü–µ–Ω–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–∞—Ö–∏."
    )
    prompt = (
        "–î–æ–±–∞–≤—å –µ—â—ë 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (–¶–ê), —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É –∏ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π... "
        + style_note + "\n\n–ò—Å—Ö–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + ctx_text
    )
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
    await send_long_message(ctx, cid, "üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:\n\n" + resp.choices[0].message.content)
    await ctx.bot.send_message(
        chat_id=cid,
        text="–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¶–ê –µ—â—ë —Ä–∞–∑", callback_data="jtbd_again")],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É", callback_data="finish_unpack")]
        ])
    )
    sess["stage"] = "jtbd_done"

@require_access
async def handle_skip_jtbd(update, ctx):
    cid = update.effective_chat.id
    await ctx.bot.send_message(
        chat_id=cid,
        text=(
            "–ü—Ä–∏–Ω—è—Ç–æ! üëå\n\n"
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ‚Äî –∑–Ω–∞–π, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –ö–æ–Ω—Ç–µ–Ω—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ\n\n"
            "–û–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
            "‚Ä¢ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥ –ª—é–±—É—é —Å–æ—Ü—Å–µ—Ç—å\n"
            "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±—Ä–∏–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω\n"
            "‚Ä¢ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—ã, —Å—Ç–æ—Ä–∏—Å –∏ –¥–∞–∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∏–¥–µ–æ\n\n"
            "–ü–æ–¥–∫–ª—é—á–∏–º –µ–≥–æ?"
        ),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")],
            [InlineKeyboardButton("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", callback_data="have")],
            [InlineKeyboardButton("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", callback_data="later")]
        ])
    )
    sessions[cid]["stage"] = "jtbd_done"

# ------------------ MAIN ------------------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("gentoken", gentoken))  # –∞–¥–º–∏–Ω—Å–∫–∞—è

    # –∫–Ω–æ–ø–∫–∏/—Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(CallbackQueryHandler(handle_more_jtbd, pattern="jtbd_more"))
    app.add_handler(CallbackQueryHandler(handle_skip_jtbd, pattern="jtbd_done"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    app.run_polling()

if __name__ == "__main__":
    main()
