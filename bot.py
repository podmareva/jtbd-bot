import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters, ContextTypes
)
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/‚Ä¶) –∏ "
    "[–î–æ–≥–æ–≤–æ—Ä–æ–º‚Äë–æ—Ñ–µ—Ä—Ç–æ–π](https://docs.google.com/‚Ä¶).\n\n"
    "‚úÖ –ù–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª ‚Äî –∏ –ø–æ–µ—Ö–∞–ª–∏!"
)

INTERVIEW_Q = [f"{i+1}. –ó–¥–µ—Å—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Ññ{i+1}." for i in range(15)]
MAIN_MENU = [("üì± BIO","bio"),("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞","product"),("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê","jtbd")]
FINAL_MENU = [("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø","get_access"),("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ","have"),("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ","later")]

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage":"welcome","answers":[],"product_answers":[], "positioning":""}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê",callback_data="agree")]]
    await ctx.bot.send_message(cid, WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id; query = update.callback_query; data = query.data
    sess = sessions.get(cid); await query.answer()
    if not sess: return

    if sess["stage"]=="welcome" and data=="agree":
        sess["stage"]="interview"; sess["answers"]=[]
        await ctx.bot.send_message(cid, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ –∏ —á–µ—Å—Ç–Ω–æ üëá")
        await ctx.bot.send_message(cid, INTERVIEW_Q[0])
        return

    if sess["stage"]=="done_interview" and data=="bio":
        sess["stage"]="bio"; await generate_bio(cid,sess,ctx); return

    if sess["stage"] in ("done_interview","done_bio") and data=="product":
        sess["stage"]="product_ask"; sess["product_answers"]=[]
        await ctx.bot.send_message(cid, "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ ‚Äî —è—Ä–∫–æ –∏ –∂–∏–≤–æ, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞–ª–∞ –µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.")
        return

    if sess["stage"] in ("done_interview","done_bio","done_product") and data=="jtbd":
        await start_jtbd(cid,sess,ctx); return

    if data=="jtbd_more" and sess["stage"]=="jtbd_first":
        await handle_more_jtbd(update,ctx); return
    if data=="jtbd_done" and sess["stage"]=="jtbd_first":
        await handle_skip_jtbd(update,ctx); return

async def generate_bio(cid,sess,ctx):
    prompt = ("–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ BIO –¥–ª—è Instagram (–¥–æ 180 —Å–∏–º–≤–æ–ª–æ–≤)."
              "\n–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n" + sess["positioning"])
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo",
                                        messages=[{"role":"user","content":prompt}])
    await ctx.bot.send_message(cid, resp.choices[0].message.content)
    sess["stage"]="done_bio"
    kb = [[InlineKeyboardButton(n,callback_data=c)] for n,c in MAIN_MENU if c!="bio"]
    await ctx.bot.send_message(cid,"–ß—Ç–æ –¥–∞–ª—å—à–µ?",reply_markup=InlineKeyboardMarkup(kb))

async def start_jtbd(cid,sess,ctx):
    prompt = ("–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, "
              "—Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 3‚Äì4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê –ø–æ JTBD.\n"
              "–í —Ñ–æ—Ä–º–∞—Ç–µ:\n"
              "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞:\n"
              "- Job-to-be-done\n- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n- –ë–æ–ª–∏\n- –¢—Ä–∏–≥–≥–µ—Ä—ã/–ë–∞—Ä—å–µ—Ä—ã\n- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã\n")
    window = "\n".join(sess["answers"]+sess["product_answers"])
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo",
                                        messages=[{"role":"user","content":prompt+"\n"+window}])
    await ctx.bot.send_message(cid, "üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê:\n\n" + resp.choices[0].message.content,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–•–æ—á—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã",callback_data="jtbd_more")],
            [InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—é",callback_data="jtbd_done")]
        ]))
    sess["stage"]="jtbd_first"

async def handle_more_jtbd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo",
               messages=[{"role":"user","content":(
                   "–î–æ–±–∞–≤—å –µ—â—ë 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ, JTBD, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –±–æ–ª–∏, —Ç—Ä–∏–≥–≥–µ—Ä—ã/–±–∞—Ä—å–µ—Ä—ã, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã)."
               )}])
    await ctx.bot.send_message(cid, resp.choices[0].message.content)
    await ctx.bot.send_message(cid,
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî –æ–Ω —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ—Å—Ç—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(n,callback_data=c)] for n,c in FINAL_MENU]))
    sessions[cid]["stage"]="done_jtbd"

async def handle_skip_jtbd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    await ctx.bot.send_message(cid,
        "–ü–æ–Ω—è–ª–∞! –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî –æ–Ω —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ—Å—Ç—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(n,callback_data=c)] for n,c in FINAL_MENU]))
    sessions[cid]["stage"]="done_jtbd"

async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id; sess = sessions.get(cid); text = update.message.text.strip()
    if not sess:
        return await ctx.bot.send_message(cid, "–ù–∞–∂–º–∏ /start")

    if sess["stage"]=="interview":
        sess["answers"].append(text)
        cmpt = openai.ChatCompletion.create(model="gpt-3.5-turbo",
            messages=[{"role":"system","content":"–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏ –æ—Ç–≤–µ—Ç–æ–º –¥–æ 2 —Ñ—Ä–∞–∑ –Ω–∞ ¬´—Ç—ã¬ª."},
                      {"role":"user","content":text}])
        await ctx.bot.send_message(cid, cmpt.choices[0].message.content)
        idx = len(sess["answers"])
        if idx < len(INTERVIEW_Q):
            await ctx.bot.send_message(cid, INTERVIEW_Q[idx])
        else:
            sess["stage"]="done_interview"
            full = "\n".join(sess["answers"])
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo",
                messages=[{"role":"system","content":"–¢—ã ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥‚Äë–ø—Å–∏—Ö–æ–ª–æ–≥. –°–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É: –¶–µ–Ω–Ω–æ—Å—Ç–∏; –ú–æ—Ç–∏–≤–∞—Ü–∏—è; –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã; –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ; –Ø–¥—Ä–æ —Å–æ–æ–±—â–µ–Ω–∏–π."},
                          {"role":"user","content":full}])
            summary = resp.choices[0].message.content
            await ctx.bot.send_message(cid, "‚úÖ –¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞:\n\n" + summary)
            resp2 = openai.ChatCompletion.create(model="gpt-3.5-turbo",
                messages=[{"role":"system","content":"–í—ã–¥–∞–π —á—ë—Ç–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–∏—à–∞; —Ü–µ–Ω–Ω–æ—Å—Ç—å; –æ—Ç–ª–∏—á–∏–µ; —Ñ–æ—Ä–º–∞—Ç: –∞–±–∑–∞—Ü + –±—É–ª–ª–µ—Ç—ã."},
                          {"role":"user","content":summary}])
            sess["positioning"] = resp2.choices[0].message.content
            await ctx.bot.send_message(cid, sess["positioning"])
            kb = [[InlineKeyboardButton(n,callback_data=c)] for n,c in MAIN_MENU]
            await ctx.bot.send_message(cid, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess["stage"]=="product_ask":
        sess["product_answers"].append(text)
        prompt = "üîé –í–æ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî 3 —Ç–æ—á–∫–∏ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo",
            messages=[{"role":"user","content":prompt + "\n".join(sess["product_answers"])}])
        await ctx.bot.send_message(cid, resp.choices[0].message.content)
        sess["stage"]="done_product"
        kb = [[InlineKeyboardButton(n,callback_data=c)] for n,c in MAIN_MENU if c!="product"]
        await ctx.bot.send_message(cid, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess["stage"]=="done_jtbd" and text.lower().replace(" ","_") in ["get_access","have","later"]:
        msgs = {
            "get_access":"üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: https://your-link.com",
            "have":"üëè –û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π!",
            "later":"üöÄ –û–±—Ä–∞—Ç–∏—Å—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞)."
        }
        await ctx.bot.send_message(cid, msgs[text.lower().replace(" ","_")])
        return

    await ctx.bot.send_message(cid, "–ù–∞–∂–º–∏ /start –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start",start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,message_handler))
    app.run_polling()

if __name__=="__main__":
    main()
