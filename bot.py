import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters, ContextTypes
)
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/‚Ä¶) –∏ "
    "[–î–æ–≥–æ–≤–æ—Ä–æ–º‚Äë–æ—Ñ–µ—Ä—Ç–æ–π](https://docs.google.com/‚Ä¶).\n\n"
    "‚úÖ –ù–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª ‚Äî –∏ –ø–æ–µ—Ö–∞–ª–∏!"
)

INTERVIEW_Q = [
    "1. –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –∏ –ø–æ—á–µ–º—É —Ç—ã –≤—ã–±—Ä–∞–ª(–∞) —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?",
    "2. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "3. –ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?",
    "4. –ö–∞–∫–∏–µ —É —Ç–µ–±—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞?",
    "5. –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –¥–∞—ë—Ç —Å–∏–ª—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å?",
    "6. –ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç—ã –Ω–µ –º–µ–Ω—è–µ—à—å –Ω–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö?",
    "7. –ö–∞–∫–∏–º —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å –≤ –≥–ª–∞–∑–∞—Ö —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏?",
    "8. –ö–∞–∫–∏–º –æ–ø—ã—Ç–æ–º —Ç—ã —Ö–æ—á–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ?",
    "9. –ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—á–µ—à—å –ø—Ä–∏–≤–Ω–µ—Å—Ç–∏ –≤ –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤?",
    "10. –ß–µ–º —Ç—ã –æ—Ç–ª–∏—á–∞–µ—à—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤?",
    "11. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏—Å—Å–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—à—å?",
    "12. –ö–∞–∫–∏–µ —Ç–µ–º—ã —Å—á–∏—Ç–∞–µ—à—å –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è –±–ª–æ–≥–∞?",
    "13. –° –∫–∞–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ç–µ–±–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å?",
    "14. –ï—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏ —Ç–µ–±—è?",
    "15. –ö–∞–∫–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è?"
]

MAIN_MENU = [("üì± BIO", "bio"), ("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞", "product"), ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")]
FINAL_MENU = [("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "get_access"), ("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", "have"), ("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", "later")]

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage": "welcome", "answers": [], "product_answers": []}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê", callback_data="agree")]]
    await ctx.bot.send_message(chat_id=cid, text=WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    query = update.callback_query; data = query.data
    sess = sessions.get(cid); await query.answer()
    if not sess: return

    if sess["stage"] == "welcome" and data == "agree":
        sess["stage"] = "interview"; sess["answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="‚úÖ –°–ø–∞—Å–∏–±–æ! –î–∞–≤–∞–π —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å—Å—è. –ü–æ–µ—Ö–∞–ª–∏üëá")
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0]); return

    # BIO
    if sess["stage"] == "done_interview" and data == "bio":
        sess["stage"] = "bio"; await generate_bio(cid, sess, ctx); return
    # Product
    if sess["stage"] in ("done_interview", "done_bio") and data == "product":
        sess["stage"] = "product_ask"; sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ ‚Äî —è—Ä–∫–æ –∏ –∂–∏–≤–æ, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞–ª–∞ –µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É."); return
    # JTBD
    if sess["stage"] in ("done_interview","done_bio","done_product") and data == "jtbd":
        await start_jtbd(cid, sess, ctx); return
    return

async def generate_bio(cid, sess, ctx):
    prompt = (
        "–°—Ñ–æ—Ä–º–∏—Ä—É–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ BIO –¥–ª—è –ò–Ω—Å—Ç–∞–≥—Ä–∞–º:\n"
        f"- –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: 3‚Äì4 —Ü–µ–ø–ª—è—é—â–∏—Ö —Ç–µ–∑–∏—Å–∞ (–¥–æ 180 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        "- –ì–æ–≤–æ—Ä–∏–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ ¬´—Ç—ã¬ª.\n"
        "–û—Ç–≤–µ—Ç—ã:\n" + "\n".join(sess["answers"])
    )
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
    await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
    sess["stage"] = "done_bio"
    kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="bio"]
    await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

async def start_jtbd(cid, sess, ctx):
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    prompt0 = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤—ã–¥–µ–ª–∏ 3‚Äì4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ + –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
        "\n–û—Ç–≤–µ—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ ¬´—Ç—ã¬ª."
    )
    resp0 = openai.ChatCompletion.create(model="gpt-3.5-turbo",
        messages=[{"role":"user","content":prompt0 + "\n\n" + "\n".join(sess["answers"] + sess["product_answers"])}])
    text0 = resp0.choices[0].message.content
    kb = [[InlineKeyboardButton("–î–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã", callback_data="more_jtbd")],
          [InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—é", callback_data="skip_jtbd")]]
    await ctx.bot.send_message(chat_id=cid, text=text0, reply_markup=InlineKeyboardMarkup(kb))
    # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ stage jtbd_first
    sess["stage"] = "jtbd_first"

async def handle_more_jtbd(update, ctx):
    cid = update.effective_chat.id; sess = sessions[cid]
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo",
        messages=[{"role":"user","content":"–î–æ–±–∞–≤—å –µ—â—ë 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ ¬´—Ç—ã¬ª."}])
    await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
    await ctx.bot.send_message(chat_id=cid,
        text="–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî –æ–Ω —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ—Å—Ç—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")],
                                           [InlineKeyboardButton("–£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", callback_data="have")],
                                           [InlineKeyboardButton("–û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", callback_data="later")]]))
    sess["stage"] = "done_jtbd"

async def handle_skip_jtbd(update, ctx):
    cid = update.effective_chat.id; sess = sessions[cid]
    await ctx.bot.send_message(chat_id=cid,
        text="–ü–æ–Ω—è–ª–∞! –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî –æ–Ω —É–º–µ–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ—Å—Ç—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")],
                                           [InlineKeyboardButton("–£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", callback_data="have")],
                                           [InlineKeyboardButton("–û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", callback_data="later")]]))
    sess["stage"] = "done_jtbd"

async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id; sess = sessions.get(cid)
    if not sess: return
    text = update.message.text.strip()

    if sess["stage"] == "interview":
        sess["answers"].append(text)
        cmpt = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role":"system","content":"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç, –Ω–∞ ¬´—Ç—ã¬ª, –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ –ø–æ –¥–µ–ª—É."},
                      {"role":"user","content":text}]
        )
        await ctx.bot.send_message(chat_id=cid, text=cmpt.choices[0].message.content)
        idx = len(sess["answers"])
        await ctx.bot.send_message(chat_id=cid, text=(INTERVIEW_Q[idx] if idx<15 else ""))
        if idx == 15:
            sess["stage"] = "done_interview"
        return

    if sess["stage"] == "product_ask":
        sess["product_answers"].append(text)
        # —á–∏—Ç–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏ —Å—Ä–∞–∑—É –≤—ã–¥–∞—ë–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        prompt = (
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –¥–∞–π 3‚Äë4 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            + "\n".join(sess["product_answers"]) + "\n"
            "–°–æ–≤–µ—Ç—ã: –∫–∞–∫ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å, –∫–∞–∫ –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å."
        )
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
        sess["stage"] = "done_product"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="product"]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess["stage"] == "done_jtbd" and text.lower().replace(" ","_") in ["get_access","have","later"]:
        msgs = {
            "get_access": "üëâ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: https://your-link.com",
            "have": "üëè –û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å ‚Äî —Å—É–ø–µ—Ä!",
            "later": "üöÄ –û–±—Ä–∞—Ç–∏—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        }
        await ctx.bot.send_message(chat_id=cid, text=msgs[text.lower().replace(" ","_")])
        return

    await ctx.bot.send_message(chat_id=cid, text="üëç –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø–∏—à–∏ /start")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(CallbackQueryHandler(handle_more_jtbd, pattern="more_jtbd"))
    app.add_handler(CallbackQueryHandler(handle_skip_jtbd, pattern="skip_jtbd"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
