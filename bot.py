import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/‚Ä¶) –∏ "
    "[–î–æ–≥–æ–≤–æ—Ä–æ–º‚Äë–æ—Ñ–µ—Ä—Ç–æ–π](https://docs.google.com/‚Ä¶).\n\n"
    "‚úÖ –ù–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª ‚Äî –∏ –Ω–∞—á–Ω—ë–º!"
)

INTERVIEW_Q = [
    "1. –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –∏ –ø–æ—á–µ–º—É —Ç—ã –≤—ã–±—Ä–∞–ª(–∞) —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?",
    "2. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "3. –ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?",
    "4. –ö–∞–∫–∏–µ —É —Ç–µ–±—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞?",
    "5. –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –¥–∞—ë—Ç —Å–∏–ª—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å?",
    "6. –ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç—ã –Ω–µ –º–µ–Ω—è–µ—à—å –Ω–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö?",
    "7. –ö–∞–∫–∏–º —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å –≤ –≥–ª–∞–∑–∞—Ö —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏?",
    "8. –ö–∞–∫–∏–º –æ–ø—ã—Ç–æ–º —Ç—ã —Ö–æ—á–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ?",
    "9. –ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—á–µ—à—å –ø—Ä–∏–≤–Ω–µ—Å—Ç–∏ –≤ –∂–∏–∑–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤?",
    "10. –ß–µ–º —Ç—ã –æ—Ç–ª–∏—á–∞–µ—à—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤?",
    "11. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏—Å—Å–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—à—å?",
    "12. –ö–∞–∫–∏–µ —Ç–µ–º—ã —Å—á–∏—Ç–∞–µ—à—å –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è –±–ª–æ–≥–∞?",
    "13. –° –∫–∞–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ç–µ–±–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å?",
    "14. –ï—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏ —Ç–µ–±—è?",
    "15. –ö–∞–∫–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è?"
]

MAIN_MENU = [("üì± BIO", "bio"), ("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞", "product"), ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")]
FINAL_MENU = [("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "get_access"), ("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", "have"), ("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", "later")]

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage": "welcome", "answers": [], "product_answers": []}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê", callback_data="agree")]]
    await ctx.bot.send_message(chat_id=cid, text=WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    query = update.callback_query
    data = query.data
    sess = sessions.get(cid)
    await query.answer()
    if not sess:
        return

    if sess["stage"] == "welcome" and data == "agree":
        sess["stage"] = "interview"
        sess["answers"] = []
        await ctx.bot.send_message(chat_id=cid, text=(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
            "–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ *15 –≤–æ–ø—Ä–æ—Å–æ–≤* ‚Äî –æ—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ.\n\n"
            "–ì–æ—Ç–æ–≤(–∞)? –¢–æ–≥–¥–∞ –ø–æ–µ—Ö–∞–ª–∏ üëá"
        ), parse_mode="Markdown")
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0])

async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    if not sess:
        return
    text = update.message.text.strip()

    # –≠—Ç–∞–ø –∏–Ω—Ç–µ—Ä–≤—å—é
    if sess["stage"] == "interview":
        sess["answers"].append(text)

        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É
        cmpt = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role":"system","content":"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥-—ç–∫—Å–ø–µ—Ä—Ç ‚Äî –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –æ—Ç–≤–µ—Ç—É."},
                {"role":"user","content":text}
            ]
        )
        await ctx.bot.send_message(chat_id=cid, text=cmpt.choices[0].message.content)

        idx = len(sess["answers"])
        if idx < len(INTERVIEW_Q):
            await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[idx])
        else:
            sess["stage"] = "done_interview"
            # –ò—Ç–æ–≥–æ–≤–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
            summary = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role":"system","content":(
                        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç–∏:\n"
                        "1. –¶–µ–Ω–Ω–æ—Å—Ç–∏\n2. –ú–æ—Ç–∏–≤–∞—Ü–∏—è\n3. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å\n"
                        "4. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n5. –ß—Ç–æ —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—è–º"
                    )},
                    {"role":"user","content":"\n".join(sess["answers"])}
                ]
            ).choices[0].message.content
            await ctx.bot.send_message(chat_id=cid, text="‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç –∏—Ç–æ–≥:\n\n" + summary)
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU]
            await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç—Ç–∞–ø—ã (bio, product, jtbd)
    elif sess["stage"] == "done_interview" and text.lower() == "bio":
        sess["stage"] = "bio"
        prompt = "–°—Ñ–æ—Ä–º–∏—Ä—É–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ BIO, –∫–∞–∂–¥—ã–π ‚Äî 3 —Ç–µ–∑–∏—Å–∞ –ø–æ 180 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n" + "\n".join(sess["answers"])
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
        sess["stage"] = "done_bio"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="bio"]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "done_bio" and text.lower() == "product":
        sess["stage"] = "product_ask"
        sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ –∏ –∫–æ–º—É –æ–Ω –ø–æ–º–æ–≥–∞–µ—Ç.")

    elif sess["stage"] == "product_ask":
        sess["product_answers"].append(text)
        questions = ["–ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ—Ç?", "–î–ª—è –∫–æ–≥–æ?", "–í —á—ë–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å?"]
        idx = len(sess["product_answers"])
        if idx < len(questions):
            await ctx.bot.send_message(chat_id=cid, text=questions[idx])
        else:
            prompt = "\n".join(sess["product_answers"])
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
            await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
            sess["stage"] = "done_product"
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="product"]
            await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "done_product" and text.lower() == "jtbd":
        prompt = (
            "–°–¥–µ–ª–∞–π –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD –Ω–∞ –æ—Å–Ω–æ–≤–µ:\n"
            + "\n".join(sess["answers"]) + "\n" + "\n".join(sess["product_answers"])
            + "\n–í–∫–ª—é—á–∏ —Ç—Ä–∏ –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞."
        )
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
        sess["stage"] = "done_jtbd"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in FINAL_MENU]
        await ctx.bot.send_message(chat_id=cid, text="–í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–∞–ª—å—à–µ:", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "done_jtbd" and text.lower().replace(" ", "_") in ["get_access","have","later"]:
        key = text.lower().replace(" ", "_")
        msgs = {
            "get_access": "üëâ –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: https://your-link.com",
            "have": "üëè –ó–¥–æ—Ä–æ–≤–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
            "later": "üöÄ –ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞), —è –∑–¥–µ—Å—å!"
        }
        await ctx.bot.send_message(chat_id=cid, text=msgs[key])

    else:
        await ctx.bot.send_message(chat_id=cid, text="–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –≤—ã—à–µ –∏–ª–∏ –ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
