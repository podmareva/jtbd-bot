import os
import sys
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters, ContextTypes
)
import openai

# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if "RUNNING_BOT" in os.environ:
    print("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.")
    sys.exit(1)
os.environ["RUNNING_BOT"] = "1"

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/‚Ä¶) –∏ "
    "[–î–æ–≥–æ–≤–æ—Ä–æ–º‚Äë–æ—Ñ–µ—Ä—Ç–æ–π](https://docs.google.com/‚Ä¶).\n\n"
    "‚úÖ –ù–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª ‚Äî –∏ –ø–æ–µ—Ö–∞–ª–∏!"
)

INTERVIEW_Q = [
    "1. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ. –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è?",
    "2. –ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ —Ç–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ?",
    "3. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å –∫–ª—é—á–µ–≤—ã–º–∏ –≤ –∂–∏–∑–Ω–∏ –∏ –≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "4. –í —á—ë–º —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ—é –º–∏—Å—Å–∏—é –∏–ª–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?",
    "5. –ß—Ç–æ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–≤–æ–∏–º –≥–ª–∞–≤–Ω—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º?",
    "6. –ö–∞–∫–∏–µ —á–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–æ–º–æ–≥–∞—é—Ç —Ç–µ–±–µ –≤ —Ä–∞–±–æ—Ç–µ?",
    "7. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–ª–∏ —É–±–µ–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É–µ—à—å—Å—è?",
    "8. –ö–∞–∫–∏–µ —Ç–µ–º—ã —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –±–ª–∏–∑–∫–∏ –∏ –≤–∞–∂–Ω—ã?",
    "9. –ö–∞–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–≤—ã–∫–∞–º–∏ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è?",
    "10. –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç—Å—è —Ä–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é —Å–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "11. –ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±—è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–ª–∏ –∫–ª–∏–µ–Ω—Ç—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏?",
    "12. –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–∑—ã–≤–∞—Ç—å —É —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏?",
    "13. –í —á—ë–º —Ç—ã –æ—Ç–ª–∏—á–∞–µ—à—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö –≤ —Å–≤–æ–µ–π –Ω–∏—à–µ?",
    "14. –ö–∞–∫–æ–π –æ–±—Ä–∞–∑ —Ç—ã —Å—Ç—Ä–µ–º–∏—à—å—Å—è —Å–æ–∑–¥–∞—Ç—å –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö?",
    "15. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –ª—é–¥–∏ –≥–æ–≤–æ—Ä–∏–ª–∏ –æ —Ç–µ–±–µ –ø–æ—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–≤–æ–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–º?"
]

MAIN_MENU = [
    ("üì± BIO", "bio"),
    ("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞", "product"),
    ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")
]

# ---------- HANDLERS ----------

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage": "welcome", "answers": [], "product_answers": []}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê", callback_data="agree")]]
    await ctx.bot.send_message(chat_id=cid, text=WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    query = update.callback_query
    data = query.data
    sess = sessions.get(cid)
    await query.answer()
    if not sess:
        return

    # --- –°–æ–≥–ª–∞—Å–∏–µ ---
    if sess["stage"] == "welcome" and data == "agree":
        sess["stage"] = "interview"
        await ctx.bot.send_message(chat_id=cid,
                                   text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —á–µ—Å—Ç–Ω–æ üëá")
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0])
        return

    # --- BIO –ø–æ –∫–Ω–æ–ø–∫–µ ---
    if sess["stage"] == "done_interview" and data == "bio":
        sess["stage"] = "bio"
        await generate_bio(cid, sess, ctx)
        return

    # --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç—É ---
    if sess["stage"] in ("done_interview", "done_bio") and data == "product":
        sess["stage"] = "product_ask"
        sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ ‚Äî –∫–∞–∫ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        return

    # --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ JTBD ---
    if sess["stage"] in ("done_interview", "done_bio", "done_product") and data == "jtbd":
        await start_jtbd(cid, sess, ctx)
        return

    if data == "jtbd_more" and sess["stage"] == "jtbd_first":
        await handle_more_jtbd(update, ctx)
        return

    if data == "jtbd_done" and sess["stage"] == "jtbd_first":
        await handle_skip_jtbd(update, ctx)
        return

async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    text = update.message.text.strip()
    if not sess:
        return

    # ---------- INTERVIEW FLOW ----------
    if sess["stage"] == "interview":
        sess["answers"].append(text)
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ—É—á–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
        try:
            comment = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–æ—É—á. –ù–∞ ¬´—Ç—ã¬ª. –î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–≤–µ—Ç—É ‚Äî –ø–æ —Ç–µ–º–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤."},
                    {"role": "user", "content": text}
                ]
            )
            await ctx.bot.send_message(chat_id=cid, text=comment.choices[0].message.content)
        except Exception as e:
            await ctx.bot.send_message(chat_id=cid, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
            print("OpenAI comment error:", e)

        idx = len(sess["answers"])
        if idx < len(INTERVIEW_Q):
            await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[idx])
        else:
            # --- –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---
            sess["stage"] = "done_interview"

async def finish_interview(cid, sess, ctx):
    answers = "\n".join(sess["answers"])

    unpack = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å–¥–µ–ª–∞–π –≥–ª—É–±–æ–∫—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏: —Ü–µ–Ω–Ω–æ—Å—Ç–∏, —É–±–µ–∂–¥–µ–Ω–∏—è, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏."},
            {"role": "user", "content": answers}
        ]
    )
    unpack_text = unpack.choices[0].message.content
    sess["unpacking"] = unpack_text
    await ctx.bot.send_message(chat_id=cid, text="‚úÖ –¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞:\n\n" + unpack_text)

    pos = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {
                "role": "system",
                "content": (
                    "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —á—ë—Ç–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                    "1. –ö—Ç–æ —Ç—ã (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞)\n"
                    "**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
                    "2. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è\n"
                    "3. –¶–µ–Ω–Ω–æ—Å—Ç–∏\n"
                    "4. –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã\n"
                    "5. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
                    "6. –¶–µ–ª–∏ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è\n"
                    "7. –õ–æ–∑—É–Ω–≥\n"
                    "8. –¶–µ–ª—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)\n"
                    "9. –ú–∏—Å—Å–∏—è\n"
                    "10. –ó–Ω–∞—á–µ–Ω–∏–µ –∏–¥–µ–∏\n"
                    "11. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é\n\n"
                    "–û—Ñ–æ—Ä–º–ª—è–π —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏. –°—Ç–∏–ª—å ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π. –§–æ—Ä–º–∞—Ç Markdown."
                )
            },
            {"role": "user", "content": unpack_text}
        ]
    )
    positioning_text = pos.choices[0].message.content
    sess["positioning"] = positioning_text
    await ctx.bot.send_message(chat_id=cid, text="üéØ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n" + positioning_text)
    sess["stage"] = "done_interview"
    kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU]
    await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
    return

# ---------- BIO ----------
async def generate_bio(cid, sess, ctx):
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ BIO –¥–ª—è Instagram. "
        "–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî 3‚Äì4 —Ü–µ–ø–ª—è—é—â–∏—Ö —Ç–µ–∑–∏—Å–∞, —Å—É–º–º–∞—Ä–Ω–æ –¥–æ 180 —Å–∏–º–≤–æ–ª–æ–≤:\n\n"
        + sess["positioning"]
    )
    resp = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    await ctx.bot.send_message(chat_id=cid, text="üì± –í–∞—Ä–∏–∞–Ω—Ç—ã BIO:\n\n" + resp.choices[0].message.content)
    sess["stage"] = "done_bio"
    kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU if c != "bio"]
    await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

# ---------- JTBD ----------
async def start_jtbd(cid, sess, ctx):
    ctx_text = "\n".join(sess["answers"] + sess["product_answers"])
    prompt = (
        "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 3‚Äì4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê –ø–æ –º–µ—Ç–æ–¥—É JTBD –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∞. "
        "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ —É–∫–∞–∂–∏:\n"
        "- Job‚Äëto‚Äëbe‚Äëdone\n- –ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n- –ù–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ –±–æ–ª–∏\n"
        "- –¢—Ä–∏–≥–≥–µ—Ä—ã\n- –ë–∞—Ä—å–µ—Ä—ã\n- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã\n\n"
        "–ò—Å—Ö–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n" + ctx_text
    )
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo",
                                        messages=[{"role": "user", "content": prompt}])
    await ctx.bot.send_message(chat_id=cid,
                               text="üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê:\n\n" + resp.choices[0].message.content,
                               reply_markup=InlineKeyboardMarkup([
                                   [InlineKeyboardButton("–•–æ—á—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã", callback_data="jtbd_more")],
                                   [InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—é", callback_data="jtbd_done")]
                               ]))
    sess["stage"] = "jtbd_first"

async def handle_more_jtbd(update, ctx):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    ctx_text = "\n".join(sess["answers"] + sess["product_answers"])
    prompt = (
        "–î–æ–±–∞–≤—å –µ—â—ë 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê –ø–æ JTBD –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–∫–∂–µ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏, –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∞. "
        "(Job, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –±–æ–ª–∏, —Ç—Ä–∏–≥–≥–µ—Ä—ã, –±–∞—Ä—å–µ—Ä—ã, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã):\n\n" + ctx_text
    )
    resp = openai.ChatCompletion.create(model="gpt-3.5-turbo",
                                        messages=[{"role": "user", "content": prompt}])
    await ctx.bot.send_message(chat_id=cid,
                               text="üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:\n\n" + resp.choices[0].message.content)
    await ctx.bot.send_message(
        chat_id=cid,
        text="‚úÖ –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚Äî —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —É–ø–∞–∫–æ–≤–∫–∏ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.\n\n"
             "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º.\n"
             "–£ –º–µ–Ω—è –∫–∞–∫ —Ä–∞–∑ –µ—Å—Ç—å –∫–æ–º–ø–∞–Ω—å–æ–Ω: *–ö–æ–Ω—Ç–µ–Ω—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç* ü§ñ\n\n"
             "–û–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
             "‚Ä¢ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥ –ª—é–±—É—é —Å–æ—Ü—Å–µ—Ç—å\n"
             "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±—Ä–∏–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω\n"
             "‚Ä¢ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—ã, —Å—Ç–æ—Ä–∏—Å –∏ –¥–∞–∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∏–¥–µ–æ\n\n"
             "–•–æ—á–µ—à—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")],
            [InlineKeyboardButton("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", callback_data="have")],
            [InlineKeyboardButton("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", callback_data="later")]
        ])
    )
    sess["stage"] = "done_jtbd"

async def handle_skip_jtbd(update, ctx):
    cid = update.effective_chat.id
    await ctx.bot.send_message(
        chat_id=cid,
        text="–ü–æ–Ω—è–ª–∞! üòä\n\n"
             "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ‚Äî –∑–Ω–∞–π, —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å –ö–æ–Ω—Ç–µ–Ω—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ü§ñ\n\n"
             "–û–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
             "‚Ä¢ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥ –ª—é–±—É—é —Å–æ—Ü—Å–µ—Ç—å\n"
             "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä—É–±—Ä–∏–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω\n"
             "‚Ä¢ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç—ã, —Å—Ç–æ—Ä–∏—Å –∏ –¥–∞–∂–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∏–¥–µ–æ\n\n"
             "–ü–æ–¥–∫–ª—é—á–∏–º –µ–≥–æ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")],
            [InlineKeyboardButton("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", callback_data="have")],
            [InlineKeyboardButton("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", callback_data="later")]
        ])
    )
    sessions[cid]["stage"] = "done_jtbd"

# ---------- MAIN ----------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    # –î–æ–ø.¬†–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ JTBD‚Äë–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(handle_more_jtbd, pattern="jtbd_more"))
    app.add_handler(CallbackQueryHandler(handle_skip_jtbd, pattern="jtbd_done"))
    app.run_polling()

if __name__ == "__main__":
    main()
