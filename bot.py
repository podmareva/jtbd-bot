import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters, ContextTypes
)
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ –º–µ—Ç–æ–¥—É JTBD.\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/‚Ä¶) –∏ "
    "[–î–æ–≥–æ–≤–æ—Ä–æ–º‚Äë–æ—Ñ–µ—Ä—Ç–æ–π](https://docs.google.com/‚Ä¶)\n\n"
    "‚úÖ –ù–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª ‚Äî –∏ –ø–æ–µ—Ö–∞–ª–∏!"
)

INTERVIEW_Q = [
    "1. –ß–µ–º —Ç—ã –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –∏ –ø–æ—á–µ–º—É —Ç—ã –≤—ã–±—Ä–∞–ª —ç—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?",
    "2. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?",
    "3. –ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏?",
    "4. –ö–∞–∫–∏–µ —É —Ç–µ–±—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç–∞?",
    "5. –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ –¥–∞—ë—Ç —Å–∏–ª—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å?",
    "6. –ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç—ã –Ω–µ –º–µ–Ω—è–µ—à—å –Ω–∏ –ø—Ä–∏ –∫–∞–∫–∏—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö?",
    "7. –ö–∞–∫–∏–º —Ç—ã —Ö–æ—á–µ—à—å –±—ã—Ç—å –≤ –≥–ª–∞–∑–∞—Ö —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏?",
    "8. –ö–∞–∫–∏–º –æ–ø—ã—Ç–æ–º —Ç—ã —Ö–æ—á–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ?",
    "9. –ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ö–æ—á–µ—à—å –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤ –∂–∏–∑–Ω—å –∫–ª–∏–µ–Ω—Ç–æ–≤?",
    "10. –ß–µ–º —Ç—ã –æ—Ç–ª–∏—á–∞–µ—à—å—Å—è –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤?",
    "11. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –º–∏—Å—Å–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—à—å?",
    "12. –ö–∞–∫–∏–µ —Ç–µ–º—ã —Å—á–∏—Ç–∞–µ—à—å –≤–∞–∂–Ω—ã–º–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞?",
    "13. –° –∫–∞–∫–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å?",
    "14. –ï—Å—Ç—å –ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–∏?",
    "15. –ö–∞–∫–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è?"
]

MAIN_MENU = [
    ("üì± BIO", "bio"),
    ("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞", "product"),
    ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")
]

FINAL_MENU = [
    ("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "get_access"),
    ("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", "have"),
    ("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", "later")
]

def ask_openai(messages):
    return openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=messages).choices[0].message.content

def chunk_send(bot, chat_id, text, max_len=3000):
    parts = [text[i:i+max_len] for i in range(0, len(text), max_len)]
    for part in parts:
        bot.send_message(chat_id=chat_id, text=part)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage": "welcome", "answers": [], "product_answers": []}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê", callback_data="agree")]]
    await ctx.bot.send_message(chat_id=cid, text=WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    query = update.callback_query; data = query.data
    sess = sessions.get(cid)
    await query.answer()
    if not sess:
        return
    
    if sess["stage"] == "welcome" and data == "agree":
        sess["stage"] = "interview"
        sess["answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ –∏ —á–µ—Å—Ç–Ω–æ üëá")
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0])
        return

    if sess["stage"] == "done_interview" and data == "bio":
        sess["stage"] = "bio"
        await generate_bio(cid, sess, ctx)
        return

    if sess["stage"] in ("done_interview", "done_bio") and data == "product":
        sess["stage"] = "product_ask"
        sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="üéØ –†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ ‚Äî –∂–∏–≤–æ, –∫–∞–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞—Ö.")
        return

    if sess["stage"] in ("done_interview", "done_bio", "done_product") and data == "jtbd":
        await start_jtbd(cid, sess, ctx)
        return

    if sess["stage"] == "jtbd_first" and data == "jtbd_more":
        await handle_more_jtbd(update, ctx)
        return

    if sess["stage"] == "jtbd_first" and data == "jtbd_done":
        await handle_skip_jtbd(update, ctx)
        return

async def generate_bio(cid, sess, ctx):
    positioning = sess.get("positioning", "")
    prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ BIO –¥–ª—è Instagram (–¥–æ 180 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
        + positioning
    )
    bio_text = ask_openai([{"role": "user", "content": prompt}])
    chunk_send(ctx.bot, cid, bio_text)
    sess["stage"] = "done_bio"
    kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU if c != "bio"]
    await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

async def start_jtbd(cid, sess, ctx):
    window = "\n".join(sess["answers"] + sess["product_answers"])
    prompt0 = (
        "üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê –ø–æ JTBD (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ):\n"
        "- –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞\n"
        "- Job‚Äëto‚Äëbe‚Äëdone\n"
        "- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (3)\n"
        "- –ë–æ–ª–∏ (3)\n"
        "- –¢—Ä–∏–≥–≥–µ—Ä—ã (3)\n"
        "- –ë–∞—Ä—å–µ—Ä—ã (3)\n"
        "- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã (3)\n"
        "\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n" + window
    )
    text0 = ask_openai([{"role": "user", "content": prompt0}])
    chunk_send(ctx.bot, cid, text0)
    kb = [
        [InlineKeyboardButton("–•–æ—á—É –µ—â—ë —Å–µ–≥–º–µ–Ω—Ç—ã", callback_data="jtbd_more")],
        [InlineKeyboardButton("–•–≤–∞—Ç–∏—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—é", callback_data="jtbd_done")]
    ]
    await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
    sess["stage"] = "jtbd_first"

async def handle_more_jtbd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions[cid]
    window = "\n".join(sess["answers"] + sess["product_answers"])
    prompt = (
        "–î–æ–±–∞–≤—å –µ—â—ë 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ JTBD (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ —Ä–∞–Ω–µ–µ), –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n" + window
    )
    text = ask_openai([{"role": "user", "content": prompt}])
    chunk_send(ctx.bot, cid, text)
    await ctx.bot.send_message(chat_id=cid, text=(
        "–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ—Å—Ç—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?"
    ), reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")],
        [InlineKeyboardButton("–£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", callback_data="have")],
        [InlineKeyboardButton("–û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", callback_data="later")]
    ]))
    sess["stage"] = "done_jtbd"

async def handle_skip_jtbd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions[cid]
    await ctx.bot.send_message(chat_id=cid, text=(
        "–ü–æ–Ω—è–ª–∞! –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ‚Äî —Å–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, –ø–æ—Å—Ç—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏.\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?"
    ), reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_access")],
        [InlineKeyboardButton("–£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", callback_data="have")],
        [InlineKeyboardButton("–û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", callback_data="later")]
    ]))
    sess["stage"] = "done_jtbd"

async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    if not sess:
        return
    text = update.message.text.strip()

        if sess["stage"] == "interview":
        sess["answers"].append(text)
        # –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –º–∏–∫—Ä–æ‚Äë–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        comment = ask_openai([
            {"role": "system",
             "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Ç—ë–ø–ª—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ \"—Ç—ã\""},
            {"role": "user", "content": text}
        ])
        await ctx.bot.send_message(cid, comment)

        idx = len(sess["answers"])
        if idx < len(INTERVIEW_Q):                              #  ‚Üê  –æ—Å—Ç–∞–ª–æ—Å—å >0 –≤–æ–ø—Ä–æ—Å–æ–≤
            await ctx.bot.send_message(cid, INTERVIEW_Q[idx])
            return                                               #  ‚Üê  –≤—ã—Ö–æ–¥–∏–º, –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞

        # ----- –Ω–∏–∂–µ –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ 15‚Äë–≥–æ –æ—Ç–≤–µ—Ç–∞ -----
        sess["stage"] = "done_interview"

        # 1. –ì–ª—É–±–æ–∫–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
        full_answers = "\n".join(sess["answers"])
        unpack = ask_openai([
            {"role": "system",
             "content": ("–¢—ã —Å—Ç—Ä–∞—Ç–µ–≥‚Äë–ø—Å–∏—Ö–æ–ª–æ–≥. –°–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É: "
                         "—Ü–µ–Ω–Ω–æ—Å—Ç–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å.")},
            {"role": "user", "content": full_answers}
        ])

        # 2. –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        positioning = ask_openai([
            {"role": "system",
             "content": "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —á—ë—Ç–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–∏—à–∞, —Ü–µ–Ω–Ω–æ—Å—Ç—å, –æ—Ç–ª–∏—á–∏–µ."},
            {"role": "user", "content": unpack}
        ])
        sess["positioning"] = positioning

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–µ–∑–∞–ª–æ—Å—å
        chunk_send(ctx.bot, cid, "‚úÖ –¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞:\n\n" + unpack)
        chunk_send(ctx.bot, cid, "üéØ –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n\n" + positioning)

        # –º–µ–Ω—é
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n, c in MAIN_MENU]
        await ctx.bot.send_message(cid, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess["stage"] == "product_ask":
        sess["product_answers"].append(text)
        prompt = "üîé –í–æ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî 3‚Äì4 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞:\n" + "\n".join(sess["product_answers"])
        content = ask_openai([{"role":"user","content":prompt}])
        chunk_send(ctx.bot, cid, content)
        sess["stage"] = "done_product"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c != "product"]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess["stage"] == "done_jtbd" and text.lower().replace(" ", "_") in ["get_access", "have", "later"]:
        replies = {
            "get_access": "üëâ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: https://your-link.com",
            "have": "üëè –û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º!",
            "later": "üöÄ –û–±—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞)."
        }
        await ctx.bot.send_message(chat_id=cid, text=replies[text.lower().replace(" ", "_")])
        return

    await ctx.bot.send_message(chat_id=cid, text="–ù–∞–∂–º–∏ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É ‚ú®")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(CallbackQueryHandler(handle_more_jtbd, pattern="jtbd_more"))
    app.add_handler(CallbackQueryHandler(handle_skip_jtbd, pattern="jtbd_done"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
