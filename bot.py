import os
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import openai

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")

sessions = {}

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –≤ –±–æ—Ç–µ ¬´–¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¶–ê¬ª ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç:\n"
    "‚Ä¢ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é —ç–∫—Å–ø–µ—Ä—Ç–Ω—É—é –ª–∏—á–Ω–æ—Å—Ç—å;\n"
    "‚Ä¢ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ BIO;\n"
    "‚Ä¢ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É;\n"
    "‚Ä¢ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD.\n\n"
    "üîê –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–≥–ª–∞—Å–∏–µ —Å "
    "[–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](https://docs.google.com/‚Ä¶) –∏ "
    "[–î–æ–≥–æ–≤–æ—Ä–æ–º‚Äë–æ—Ñ–µ—Ä—Ç–æ–π](https://docs.google.com/‚Ä¶).\n\n"
    "‚úÖ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´–°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê¬ª, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å."
)

INTERVIEW_Q = [
    "1. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ ‚Äì —á–µ–º –≥–æ—Ä–¥–∏—à—å—Å—è?",
    "2. –ö–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–∞–∂–Ω—ã –¥–ª—è —Ç–µ–±—è?",
    "3. –ß—Ç–æ —Ç–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ?",
    "4. –ö–∞–∫–∏–µ –ª–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–º–æ–≥–∞—é—Ç —Ç–µ–±–µ –¥–æ–±–∏–≤–∞—Ç—å—Å—è —É—Å–ø–µ—Ö–∞?",
    "5. –ö–∞–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–≤—ã–∫–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–∞—â–µ –≤—Å–µ–≥–æ?",
    "6. –ö–∞–∫ —Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—à—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º?",
    "7. –ß—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã —Ü–µ–Ω—è—Ç –≤ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "8. –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —Ç—ã —Å—Ç–∞–≤–∏—à—å –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –≤ —ç—Ç–æ–º –≥–æ–¥—É?",
    "9. –ö–∞–∫–∏–µ –≤—ã–∑–æ–≤—ã –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Ç—ã –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞–µ—à—å?",
    "10. –ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—é–±–∏—à—å –¥–æ—Å—Ç–∏–≥–∞—Ç—å?",
    "11. –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –∑–Ω–∞—á–∏–º–æ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏?",
    "12. –ö–∞–∫ —Ç—ã —É–ª—É—á—à–∞–µ—à—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏?",
    "13. –ö–∞–∫–∞—è —Ç–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏?",
    "14. –ß—Ç–æ —Ç–µ–±—è –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?",
    "15. –ö–∞–∫–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≥–æ—Ä–¥–∏—à—å—Å—è?"
]

MAIN_MENU = [
    ("üì± BIO", "bio"),
    ("üéØ –ü—Ä–æ–¥—É–∫—Ç / –£—Å–ª—É–≥–∞", "product"),
    ("üîç –ê–Ω–∞–ª–∏–∑ –¶–ê", "jtbd")
]

FINAL_MENU = [
    ("ü™Ñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", "get_access"),
    ("‚úÖ –£–∂–µ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ", "have"),
    ("‚è≥ –û–±—Ä–∞—â—É—Å—å –ø–æ–∑–∂–µ", "later")
]

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sessions[cid] = {"stage": "welcome", "answers": [], "product_answers": []}
    kb = [[InlineKeyboardButton("‚úÖ –°–û–ì–õ–ê–°–ï–ù/–°–û–ì–õ–ê–°–ù–ê", callback_data="agree")]]
    await ctx.bot.send_message(chat_id=cid, text=WELCOME, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(kb))

async def callback_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    query = update.callback_query
    data = query.data
    sess = sessions.get(cid)
    await query.answer()
    if not sess:
        return

    if sess["stage"] == "welcome" and data == "agree":
        sess["stage"] = "interview"
        await ctx.bot.send_message(chat_id=cid, text="‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ!\n–¢–µ–ø–µ—Ä—å –Ω–∞—á–Ω—ë–º —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n–Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ –∏ —á–µ—Å—Ç–Ω–æ üëá")
        await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[0])
        return

    if sess["stage"] == "done_interview" and data == "bio":
        sess["stage"] = "bio"
        prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ BIO –¥–ª—è Instagram (–¥–æ 180 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥—ã–π):\n" + "\n".join(sess["answers"])
        resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
        await ctx.bot.send_message(chat_id=cid, text=resp.choices[0].message.content)
        sess["stage"] = "done_bio"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="bio"]
        await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess["stage"] in ("done_interview", "done_bio") and data == "product":
        sess["stage"] = "product_ask"
        sess["product_answers"] = []
        await ctx.bot.send_message(chat_id=cid, text="üéØ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ—ë–º –ø—Ä–æ–¥—É–∫—Ç–µ/—É—Å–ª—É–≥–µ ‚Äî –∫–∞–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞–º –∂–∏–≤–æ –∏ —è—Å–Ω–æ.")
        return

    if sess["stage"] == "done_product" and data == "jtbd":
        sess["stage"] = "jtbd"
        await ctx.bot.send_message(chat_id=cid, text="üîç –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¶–ê –ø–æ JTBD‚Ä¶")
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        prompt1 = "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 3‚Äì4 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê –ø–æ JTBD:\n" + "\n".join(sess["product_answers"])
        resp1 = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt1}])
        await ctx.bot.send_message(chat_id=cid, text="–û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –¶–ê:\n" + resp1.choices[0].message.content)
        kb = [[InlineKeyboardButton("–î–∞, —Ö–æ—á—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ", callback_data="jtbd_more")],
              [InlineKeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="jtbd_no")]]
        await ctx.bot.send_message(chat_id=cid, text="–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess["stage"] == "jtbd" and data == "jtbd_more":
        prompt2 = "–î–æ–±–∞–≤—å –µ—â—ë 3 –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–∞ –¶–ê –ø–æ JTBD –∏ —Ä–∞—Å–ø–∏—à–∏, –∫–∞–∫ –≤—ã—à–µ."
        resp2 = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt2}])
        await ctx.bot.send_message(chat_id=cid, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:\n" + resp2.choices[0].message.content)
        sess["stage"] = "done_jtbd"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in FINAL_MENU]
        await ctx.bot.send_message(chat_id=cid, text="–ù–∞ —ç—Ç–æ–º –≤—Å—ë. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess["stage"] == "jtbd" and data == "jtbd_no":
        sess["stage"] = "done_jtbd"
        kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in FINAL_MENU]
        await ctx.bot.send_message(chat_id=cid, text="–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ! –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))
        return

    if sess.get("stage","") == "done_jtbd" and data in ("get_access","have","later"):
        msgs = {
            "get_access": "üëâ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç‚Äë–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: https://your-link.com",
            "have": "‚úÖ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã —É–∂–µ –≤ –¥–µ–ª–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.",
            "later": "üöÄ –û–±—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!"
        }
        await ctx.bot.send_message(chat_id=cid, text=msgs[data])
        return

    # –ª—é–±–æ–π –≤—ã–∑–æ–≤ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –±–µ–∑ —Å—Ç–∞–¥–∏–∏ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º
    if data in ("bio","product","jtbd"):
        await ctx.bot.send_message(chat_id=cid, text="‚ùó –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –ø–æ–ª–Ω—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É.")
        return

async def message_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    sess = sessions.get(cid)
    if not sess:
        return
    text = update.message.text.strip()

    if sess["stage"] == "interview":
        sess["answers"].append(text)
        # –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        comment = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role":"user","content":"–ö—Ä–∞—Ç–∫–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø–æ —Ç–µ–º–µ –∏ —Ç–µ–ø–ª–æ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç:\n" + text}]
        ).choices[0].message.content
        await ctx.bot.send_message(chat_id=cid, text=comment)

        idx = len(sess["answers"])
        if idx < len(INTERVIEW_Q):
            await ctx.bot.send_message(chat_id=cid, text=INTERVIEW_Q[idx])
        else:
            # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞
            prompt = "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≥–ª—É–±–æ–∫—É—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏:\n" + "\n".join(sess["answers"])
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
            await ctx.bot.send_message(chat_id=cid, text="‚úÖ –¢–≤–æ—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞:\n" + resp.choices[0].message.content)
            sess["stage"] = "done_interview"
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU]
            await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

    elif sess["stage"] == "product_ask":
        sess["product_answers"].append(text)
        prompts = [
            "–ß—Ç–æ —ç—Ç–æ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥–∞?",
            "–î–ª—è –∫–æ–≥–æ –æ–Ω?",
            "–ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–∞–µ—Ç?",
            "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º?"
        ]
        if len(sess["product_answers"]) < len(prompts):
            await ctx.bot.send_message(chat_id=cid, text=prompts[len(sess["product_answers"])])
        else:
            intro = "–í–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"
            prompt = intro + "\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—é —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:\n" + "\n".join(sess["product_answers"])
            resp = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role":"user","content":prompt}])
            await ctx.bot.send_message(chat_id=cid, text=intro + "\n" + resp.choices[0].message.content)
            sess["stage"] = "done_product"
            kb = [[InlineKeyboardButton(n, callback_data=c)] for n,c in MAIN_MENU if c!="product"]
            await ctx.bot.send_message(chat_id=cid, text="–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=InlineKeyboardMarkup(kb))

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    app.run_polling()

if __name__ == "__main__":
    main()
